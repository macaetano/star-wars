{"version":3,"sources":["store/app/actions.ts","components/styles/Heading.ts","components/styles/InputGroup.tsx","store/app/action-creators.ts","store/starships/actions.ts","store/starships/action-creators.ts","components/styles/Paginator.tsx","components/ShipList.tsx","pages/Home.tsx","store/app/reducers.ts","store/starships/reducers.ts","store/root-reducer.ts","utils/getMGLTPerStop.ts","utils/constants.ts","store/starships/saga.ts","store/root-saga.ts","store/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppTypes","Heading","styled","h1","Wrapper","div","InputGroup","label","actionLabel","action","isLoading","inputProps","submit","Number","value","alert","onKeyDown","event","key","onClick","StarshipsTypes","toggleLoading","type","TOGGLE_LOADING","toggleStep","TOGGLE_STEP","getStarships","page","isToggleStep","GET_STARSHIPS","payload","getStarshipsSuccess","ships","nextPage","GET_STARSHIPS_SUCCESS","StylePaginator","Paginator","pages","currentPage","onClickPage","onClickNext","map","index","className","StyledContainer","p","divider","ShipItem","name","stops","ShipList","totalDistance","useState","currentPageIndex","setCurrentPageIndex","dispatch","useDispatch","useSelector","state","starships","src","alt","Fragment","item","MGLTPerStop","Math","floor","Object","keys","Container","Home","setValue","app","step","onChange","target","INITIAL_STATE","reducers","undefined","combineReducers","starshipsReducers","appReducers","getConsumableTimeInHours","time","consumables","consumablesTimeInHours","split","getMGLTPerStop","MGLT","parsedMGLT","includes","starshipsSaga","put","call","fetch","response","json","list","results","apiShip","next","slice","length","all","takeLatest","rootSaga","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducers","applyMiddleware","run","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.added8e9.chunk.js","sourcesContent":["import { Action } from \"redux\";\n\nexport enum AppTypes {\n  TOGGLE_LOADING = \"TOGGLE_LOADING\",\n  TOGGLE_STEP = \"TOGGLE_STEP\",\n}\n\nexport interface ToggleStep extends Action {\n  type: typeof AppTypes.TOGGLE_STEP;\n}\n\nexport interface ToggleLoading extends Action {\n  type: typeof AppTypes.TOGGLE_LOADING;\n}\n\nexport type AppActions = ToggleLoading | ToggleStep;\n","import styled from \"styled-components\";\n\nconst Heading = styled.h1`\n  color: #ddd;\n\n  /* Portrait tablet to landscape and desktop */\n  @media (min-width: 768px) {\n    font-size: 48px;\n  }\n\n  /* Landscape phone to portrait tablet */\n  @media (max-width: 767px) {\n    font-size: 36px;\n  }\n\n  /* Landscape phones and down */\n  @media (max-width: 480px) {\n    font-size: 28px;\n    text-align: center;\n  }\n`;\n\nexport default Heading;\n","import React, { InputHTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\n\ninterface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  actionLabel: string;\n  isLoading: boolean;\n  action: () => void;\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  h3 {\n    margin-bottom: 16px;\n    color: #ddd;\n    @media (max-width: 480px) {\n      font-size: 18px;\n    }\n  }\n  div {\n    display: flex;\n    flex-direction: row;\n    height: 48px;\n\n    input {\n      background-color: #ddd;\n      color: #141414;\n      outline: none;\n    }\n    button {\n      padding: 4px 16px;\n      background-color: #edec51;\n      outline: none;\n      color: #141414;\n      cursor: pointer;\n      text-transform: uppercase;\n    }\n  }\n\n  @media (max-width: 480px) {\n    align-items: center;\n  }\n`;\n\nconst InputGroup: React.FC<Props> = ({\n  label,\n  actionLabel,\n  action,\n  isLoading,\n  ...inputProps\n}) => {\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      submit();\n    }\n  };\n\n  const submit = () => {\n    if (Number(inputProps.value) <= 0 || inputProps === \"\") {\n      alert(\"Invalid Value\");\n    } else action();\n  };\n\n  return (\n    <Wrapper>\n      <h3>{label}</h3>\n      <div>\n        <input {...inputProps} onKeyDown={handleKeyDown} />\n        <button onClick={submit}>\n          {isLoading ? \"Loading...\" : actionLabel}\n        </button>\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default InputGroup;\n","import { AppTypes, AppActions } from \"./actions\";\n\nexport const toggleLoading = (): AppActions => ({\n  type: AppTypes.TOGGLE_LOADING,\n});\n\nexport const toggleStep = (): AppActions => ({\n  type: AppTypes.TOGGLE_STEP,\n});\n","import { Action } from \"redux\";\nimport { NextPage, Ship } from \"./types\";\n\nexport enum StarshipsTypes {\n  GET_STARSHIPS = \"GET_STARSHIPS\",\n  GET_STARSHIPS_SUCCESS = \"GET_STARSHIPS_SUCCESS\",\n}\n\nexport interface GetStarships extends Action {\n  type: typeof StarshipsTypes.GET_STARSHIPS;\n  payload: {\n    page: number;\n    isToggleStep: boolean;\n  };\n}\n\nexport interface GetStarshipsSuccess extends Action {\n  type: typeof StarshipsTypes.GET_STARSHIPS_SUCCESS;\n  payload: {\n    ships: Ship[];\n    page: number;\n    nextPage: NextPage;\n  };\n}\n\nexport type StarshipActions = GetStarships | GetStarshipsSuccess;\n","import { NextPage, Ship } from \"./types\";\nimport { StarshipsTypes, StarshipActions } from \"./actions\";\n\nexport const getStarships = (\n  page: number,\n  isToggleStep = true\n): StarshipActions => ({\n  type: StarshipsTypes.GET_STARSHIPS,\n  payload: {\n    page,\n    isToggleStep,\n  },\n});\n\nexport const getStarshipsSuccess = (\n  ships: Ship[],\n  page: number,\n  nextPage: NextPage\n): StarshipActions => ({\n  type: StarshipsTypes.GET_STARSHIPS_SUCCESS,\n  payload: {\n    ships,\n    page,\n    nextPage,\n  },\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { NextPage } from \"../../store/starships/types\";\n\ninterface Props {\n  pages: string[];\n  currentPage: number;\n  nextPage: NextPage;\n  onClickNext: (page: number) => void;\n  onClickPage: (page: string) => void;\n}\n\nconst StylePaginator = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  .page {\n    font-size: 18px;\n    padding: 0 8px;\n    color: #ddd;\n  }\n  .active {\n    color: #edec51;\n  }\n`;\n\nconst Paginator: React.FC<Props> = ({\n  pages,\n  nextPage,\n  currentPage,\n  onClickPage,\n  onClickNext,\n}) => (\n  <StylePaginator>\n    {pages.map((index) => (\n      <div\n        className={`page ${currentPage === Number(index) ? \"active\" : \"\"}`}\n        key={index}\n        onClick={() => onClickPage(index)}\n      >\n        <p>{index}</p>\n      </div>\n    ))}\n    {nextPage && (\n      <div className=\"page\" onClick={() => onClickNext(nextPage)}>\n        <p>Next</p>\n      </div>\n    )}\n  </StylePaginator>\n);\n\nexport default Paginator;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { toggleStep } from \"../store/app/action-creators\";\nimport { getStarships } from \"../store/starships/action-creators\";\nimport { StoreState } from \"../store/types\";\nimport Paginator from \"./styles/Paginator\";\n\ninterface ShipItemProps {\n  name: string;\n  stops: number | string;\n}\n\nconst StyledContainer = styled.div<{ divider?: boolean }>`\n  display: flex;\n  color: #ddd;\n  align-items: center;\n  padding: 16px;\n  border-bottom: ${(p) => (p.divider ? \"1px\" : \"0\")} solid #ddd;\n\n  p {\n    font-size: 18px;\n  }\n  .name {\n    flex: 1;\n  }\n  .stops {\n    color: #edec51;\n  }\n`;\n\nconst ShipItem: React.FC<ShipItemProps> = ({ name, stops }) => (\n  <div>\n    <StyledContainer divider>\n      <p className=\"name\">{name}</p>\n      <p className=\"stops\">{stops}</p>\n    </StyledContainer>\n  </div>\n);\n\ninterface ShipListProps {\n  totalDistance: string;\n}\n\nconst ShipList: React.FC<ShipListProps> = ({ totalDistance }) => {\n  const [currentPageIndex, setCurrentPageIndex] = useState(1);\n  const dispatch = useDispatch();\n  const { pages, nextPage } = useSelector(\n    (state: StoreState) => state.starships\n  );\n\n  const onClickPage = (page: string) => setCurrentPageIndex(Number(page));\n  const onClickNext = (page: number) => {\n    dispatch(getStarships(page, false));\n    setCurrentPageIndex(page);\n  };\n  const onClickBack = () => {\n    dispatch(toggleStep());\n    setCurrentPageIndex(1);\n  };\n\n  const renderPage = () => {\n    if (pages && pages[currentPageIndex]) {\n      return (\n        <>\n          {pages[currentPageIndex].map((item, index) => (\n            <ShipItem\n              key={index}\n              name={item.name}\n              stops={\n                item.MGLTPerStop !== \"unknown\"\n                  ? Math.floor(Number(totalDistance) / item.MGLTPerStop)\n                  : \"Unknown\"\n              }\n            />\n          ))}\n        </>\n      );\n    } else return <h3>Loading</h3>;\n  };\n  return (\n    <div>\n      <img src=\"./icons/back.png\" alt=\"Back Button\" onClick={onClickBack} />\n      <StyledContainer>\n        <p className=\"name\">Name</p>\n        <p className=\"stops\">Stops</p>\n      </StyledContainer>\n      {pages && (\n        <React.Fragment>\n          {renderPage()}\n          <Paginator\n            nextPage={nextPage}\n            pages={Object.keys(pages)}\n            currentPage={currentPageIndex}\n            onClickNext={onClickNext}\n            onClickPage={onClickPage}\n          />\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default ShipList;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport Heading from \"../components/styles/Heading\";\nimport InputGroup from \"../components/styles/InputGroup\";\nimport ShipList from \"../components/ShipList\";\nimport { toggleStep } from \"../store/app/action-creators\";\nimport { getStarships } from \"../store/starships/action-creators\";\nimport { StoreState } from \"../store/types\";\n\nconst Container = styled.div`\n  background-color: #141414;\n  min-height: 100vh;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  position: relative;\n\n  .form {\n    padding: 10%;\n    position: absolute;\n    transition: all 1s ease-in-out;\n    &.open {\n      left: 0;\n    }\n\n    &.closed {\n      left: 5000px;\n    }\n  }\n\n  .list {\n    width: 100%;\n    padding: 10%;\n\n    transition: all 1s ease-in-out;\n    position: absolute;\n    &.open {\n      right: 0;\n    }\n\n    &.closed {\n      right: 5000px;\n    }\n  }\n`;\n\nconst Home = () => {\n  const [value, setValue] = useState(\"\");\n\n  const { step, isLoading } = useSelector((state: StoreState) => state.app);\n  const pages = useSelector((state: StoreState) => state.starships.pages);\n  const dispatch = useDispatch();\n\n  const onChangeValue = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setValue(event.target.value);\n\n  const handleAction = () => {\n    if (pages) {\n      dispatch(toggleStep());\n    } else {\n      dispatch(getStarships(1));\n    }\n  };\n\n  return (\n    <Container>\n      <div className={step === \"list\" ? \"form closed\" : \"form open\"}>\n        <Heading className=\"headline\">Calculate your adventure!</Heading>\n        <InputGroup\n          type=\"number\"\n          value={value}\n          onChange={onChangeValue}\n          label=\"How far, far away?\"\n          actionLabel=\"Go\"\n          action={handleAction}\n          isLoading={isLoading}\n        />\n      </div>\n      <div className={step === \"list\" ? \"list open\" : \"list closed\"}>\n        <ShipList totalDistance={value} />\n      </div>\n    </Container>\n  );\n};\n\nexport default Home;\n","import { AppTypes, AppActions } from \"./actions\";\nimport { AppState } from \"./types\";\n\nconst INITIAL_STATE: AppState = {\n  isLoading: false,\n  step: \"form\",\n};\n\nconst reducers = (state = INITIAL_STATE, action: AppActions): AppState => {\n  switch (action.type) {\n    case AppTypes.TOGGLE_LOADING:\n      return {\n        ...state,\n        isLoading: !state.isLoading,\n      };\n    case AppTypes.TOGGLE_STEP:\n      return {\n        ...state,\n        step: state.step === \"form\" ? \"list\" : \"form\",\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducers;\n","import { bindActionCreators } from \"redux\";\nimport { StarshipsTypes, StarshipActions } from \"./actions\";\nimport { StarshipsState } from \"./types\";\n\nconst INITIAL_STATE: StarshipsState = {\n  pages: undefined,\n  nextPage: 2,\n};\n\nconst reducers = (\n  state = INITIAL_STATE,\n  action: StarshipActions\n): StarshipsState => {\n  switch (action.type) {\n    case StarshipsTypes.GET_STARSHIPS_SUCCESS:\n      return {\n        ...state,\n        nextPage: action.payload.nextPage,\n        pages: {\n          ...state.pages,\n          [action.payload.page]: action.payload.ships,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducers;\n","import { combineReducers } from \"redux\";\nimport appReducers from \"./app/reducers\";\nimport starshipsReducers from \"./starships/reducers\";\n\nconst reducers = combineReducers({\n  starships: starshipsReducers,\n  app: appReducers,\n});\n\nexport default reducers;\n","import { APIShip } from \"../store/starships/types\";\nimport {\n  HOURS_IN_YEAR,\n  HOURS_IN_MONTH,\n  HOURS_IN_WEEK,\n  HOURS_IN_DAY,\n} from \"./constants\";\n\ntype PeriodType = \"YEARS\" | \"MONTHS\" | \"WEEKS\" | \"DAYS\";\nconst getConsumableTimeInHours = (\n  time: PeriodType,\n  consumables: string\n): number => {\n  const consumablesTimeInHours = Number(consumables.split(\" \")[0]);\n  switch (time) {\n    case \"DAYS\":\n      return HOURS_IN_DAY * consumablesTimeInHours;\n    case \"WEEKS\":\n      return HOURS_IN_WEEK * consumablesTimeInHours;\n    case \"MONTHS\":\n      return HOURS_IN_MONTH * consumablesTimeInHours;\n    case \"YEARS\":\n      return HOURS_IN_YEAR * consumablesTimeInHours;\n    default:\n      return 0;\n  }\n};\n\nconst getMGLTPerStop = ({ MGLT, consumables }: APIShip) => {\n  if (MGLT === \"unknown\" || consumables === \"unknown\") {\n    return \"unknown\";\n  } else {\n    const parsedMGLT = Number(MGLT);\n    if (consumables.includes(\"year\")) {\n      return parsedMGLT * getConsumableTimeInHours(\"YEARS\", consumables);\n    } else if (consumables.includes(\"month\")) {\n      return parsedMGLT * getConsumableTimeInHours(\"MONTHS\", consumables);\n    } else if (consumables.includes(\"week\")) {\n      return parsedMGLT * getConsumableTimeInHours(\"WEEKS\", consumables);\n    } else if (consumables.includes(\"day\")) {\n      return parsedMGLT * getConsumableTimeInHours(\"DAYS\", consumables);\n    }\n  }\n};\n\nexport default getMGLTPerStop;\n","export const API_URL = \"https://swapi.dev/api/starships/?page=\";\nexport const HOURS_IN_YEAR = 8760;\nexport const HOURS_IN_MONTH = 730;\nexport const HOURS_IN_WEEK = 168;\nexport const HOURS_IN_DAY = 24;\n","import { all, call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { GetStarships } from \"./actions\";\nimport { toggleLoading, toggleStep } from \"../app/action-creators\";\nimport { getStarshipsSuccess } from \"./action-creators\";\nimport { StarshipsTypes } from \"./actions\";\nimport { APIShip, Ship } from \"./types\";\nimport getMGLTPerStop from \"../../utils/getMGLTPerStop\";\nimport { API_URL } from \"../../utils/constants\";\n\nfunction* getStarships({ payload: { page, isToggleStep } }: GetStarships) {\n  try {\n    yield put(toggleLoading());\n    // @ts-ignore current redux-saga limitation  info on: https://github.com/redux-saga/redux-saga/pull/2053\n    const response = yield call(fetch, `${API_URL}${page}`);\n    // @ts-ignore current redux-saga limitation  info on: https://github.com/redux-saga/redux-saga/pull/2053\n    const payload = yield response.json();\n    const list: Ship[] = payload.results.map((apiShip: APIShip) => ({\n      ...apiShip,\n      MGLTPerStop: getMGLTPerStop(apiShip),\n    }));\n    const nextPage = payload.next\n      ? Number(payload.next.slice(payload.next.length - 1))\n      : null;\n    yield put(getStarshipsSuccess(list, page, nextPage));\n    if (isToggleStep) {\n      yield put(toggleStep());\n    }\n  } catch (e) {\n    alert(e);\n  } finally {\n    yield put(toggleLoading());\n  }\n}\n\nfunction* starshipsSaga() {\n  yield all([takeLatest(StarshipsTypes.GET_STARSHIPS, getStarships)]);\n}\n\nexport default starshipsSaga;\n","import { all } from \"@redux-saga/core/effects\";\nimport starshipsSaga from \"./starships/saga\";\n\nfunction* rootSaga() {\n  yield all([starshipsSaga()]);\n}\n\nexport default rootSaga;\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootReducers from \"./root-reducer\";\nimport rootSaga from \"./root-saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducers, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createGlobalStyle } from \"styled-components\";\nimport Home from \"./pages/Home\";\nimport store from \"./store\";\n\nconst GlobalStyle = createGlobalStyle`\n\n  body,html {\n      margin: 0;\n      padding: 0;\n      font-family: 'Oswald', sans-serif;\n  }\n\n  input, button {\n      font-family: 'Oswald', sans-serif;\n\n  }\n\n  * {\n      box-sizing: border-box;\n  }\n`;\n\nfunction App() {\n  return (\n    <div>\n      <Provider store={store}>\n        <GlobalStyle />\n        <Home />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}